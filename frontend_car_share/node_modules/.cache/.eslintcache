[{"/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/index.js":"1","/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/reportWebVitals.js":"2","/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/App.jsx":"3","/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/components/LoginPage.jsx":"4","/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/components/layout/NavBar.js":"5","/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/components/layout/NavBarTheme.js":"6","/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/context/UserContext.js":"7","/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/components/SignUpPage.jsx":"8","/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/components/HomePage.jsx":"9","/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/services/carServiceFetch.js":"10","/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/components/layout/Feed.js":"11","/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/components/layout/RideCard.js":"12"},{"size":586,"mtime":1669646006770,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1669626999368,"results":"15","hashOfConfig":"14"},{"size":1183,"mtime":1669648513801,"results":"16","hashOfConfig":"14"},{"size":7138,"mtime":1668709179609,"results":"17","hashOfConfig":"14"},{"size":2394,"mtime":1669646083752,"results":"18","hashOfConfig":"14"},{"size":355,"mtime":1668696031967,"results":"19","hashOfConfig":"14"},{"size":81,"mtime":1668695718565,"results":"20","hashOfConfig":"14"},{"size":8948,"mtime":1669647583826,"results":"21","hashOfConfig":"14"},{"size":867,"mtime":1669648149508,"results":"22","hashOfConfig":"14"},{"size":126,"mtime":1669648004614,"results":"23","hashOfConfig":"14"},{"size":17682,"mtime":1669649581765,"results":"24","hashOfConfig":"14"},{"size":9762,"mtime":1669648964104,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"opt5z1",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},"/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/index.js",[],[],"/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/reportWebVitals.js",[],[],[],"/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/App.jsx",[],[],"/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/components/LoginPage.jsx",[],[],"/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/components/layout/NavBar.js",[],[],"/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/components/layout/NavBarTheme.js",[],[],"/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/context/UserContext.js",[],[],"/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/components/SignUpPage.jsx",[],[],"/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/components/HomePage.jsx",["66"],[],"import React, {useEffect, useState} from 'react';\nimport {Box} from \"@mui/material\";\nimport Feed from \"../components/layout/Feed\";\nimport api from \"../services/carServiceFetch\";\n\n\n\nfunction HomePage() {\n\n    const[rides, setRides] = useState(null)\n\n\n    useEffect(() => {\n\n        const fetchRides = async () => {\n            try{\n                const response = await api.get('/rides')\n                console.log(response.data)\n                setRides(response.data)\n            } catch (err) {\n                if(err.response) {\n                    console.log(err.response.status)\n                    console.log(err.response.headers)\n                }\n            }\n        }\n        console.log(rides)\n\n        fetchRides()\n\n    }, [])\n\n    return (\n        <Box>\n            {rides && <Feed props={rides}/>}\n        </Box>\n    )\n}\n\nexport default HomePage;\n\n","/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/services/carServiceFetch.js",[],[],"/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/components/layout/Feed.js",["67","68"],[],"import React, {useEffect, useState} from 'react';\nimport {\n    alpha,\n    Box, Button,\n    FormControl, InputBase,\n    InputLabel,\n    List,\n    ListItem, MenuItem, Select, Slider,\n    Stack, styled,\n    Typography\n} from \"@mui/material\";\n\nimport FilterAltIcon from '@mui/icons-material/FilterAlt';\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport riderided from \"./RideCard\";\nimport RideCard from \"./RideCard\";\n\n\n\n//search box settings\nconst SearchS = styled('div')(({ theme }) => ({\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n        marginLeft: theme.spacing(1),\n        width: 'auto',\n    },\n}));\n\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n}));\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n    color: 'inherit',\n    '& .MuiInputBase-input': {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: '12ch',\n            '&:focus': {\n                width: '20ch',\n            },\n        },\n    },\n}));\n\n\n\nfunction Feed(props) {\n\n    const rides = props.props\n\n\n    // searchbox filter\n    const [filteredList, setFilteredList] = useState(rides);\n    const [searchWord, setSearchWord] = useState(\"\");\n\n    //button handler\n    const handleFilter = (event) => {\n        setSearchWord(event.target.value);\n    }\n    //filtering method\n    const filteredBySearchWord = (filteredData) => {\n\n        if(!searchWord) return filteredData;\n\n\n        const filteredRides = filteredData.filter(\n            (ride) => ride.brand.toUpperCase().includes(searchWord.toUpperCase()) ||\n                ride.model.toUpperCase().includes(searchWord.toUpperCase())\n\n        );\n        return filteredRides;\n    }\n\n\n    // brand filter\n    const [selectedCity, setSelectedCity] = React.useState('');\n\n    //button handler\n    const handleChangeCity = (event) => {\n        const inputCity = event.target.value;\n\n        if (inputCity === selectedCity) {\n            setSelectedCity(\"\");\n        }\n        else {\n            setSelectedCity(inputCity);\n        }\n    }\n\n    //filtering method\n    const filterByBrand = (filteredData) => {\n\n        if(!selectedCity) return filteredData;\n\n        const filteredRides = filteredData.filter(\n            (ride) => ride.city === selectedCity\n        );\n\n        return filteredRides;\n    }\n\n\n    //date from\n    const [dateFrom, setdateFrom] = useState('');\n    //date from button\n    const handleChangedateFrom = (event) => {\n        setdateFrom(event.target.value);\n    }\n    //date until\n    const [yearUntil, setYearUntil] = useState('');\n    //date until button\n    const handleChangeYearUntil = (event) => {\n        setYearUntil(event.target.value);\n    }\n\n    //filter method\n    const filterByDate = (filteredData) => {\n\n        if(!dateFrom && !yearUntil) {\n            return filteredData;\n        }\n        else if (!dateFrom){\n            const filteredRides = filteredData.filter(\n                (ride) => ride.year <= yearUntil\n            );\n            return filteredRides;\n        }\n        else if (!yearUntil){\n            const filteredRides = filteredData.filter(\n                (ride) => dateFrom <= ride.year\n            );\n            return filteredRides;\n        }\n        else {\n            const filteredRides = filteredData.filter(\n                (ride) => dateFrom <= ride.year && ride.year <= yearUntil\n            );\n            return filteredRides;\n        }\n\n    }\n\n\n    //  consumption filter\n    const [consumptionValue, setConsumptionValue] = useState([0, 15]);\n    const minDistance = 1;\n\n    // must have function\n    function fuelConsumptionValue(value) {\n        return `${value}l/100km`;\n    }\n\n\n    //handle consumption button\n    const handleChangeSliderConsumption = (event, newValue, activeThumb1) => {\n        if(!Array.isArray(newValue)){\n            return;\n        }\n\n        if(activeThumb1 === 0){\n            setConsumptionValue([Math.min(newValue[0], consumptionValue[1] - minDistance), consumptionValue[1]])\n        } else {\n            setConsumptionValue([consumptionValue[0], Math.max(newValue[1], consumptionValue[0] + minDistance)]);\n        }\n    };\n\n    //filter method\n    const filterByConsumption = (filteredData) => {\n\n\n        if( consumptionValue[0] === 0 && consumptionValue[1] === 15) {\n            return filteredData;\n        }\n        else if (consumptionValue[0] === 0){\n            const filteredRides = filteredData.filter(\n                (ride) => ride.rideInfos[0].performance.fuelConsumption < consumptionValue[1]\n            );\n            return filteredRides;\n        }\n        else if (consumptionValue[1] === 15){\n            const filteredRides = filteredData.filter(\n                (ride) => consumptionValue[0] < ride.rideInfos[0].performance.fuelConsumption\n            );\n            return filteredRides;\n        }\n        else {\n            const filteredRides = filteredData.filter(\n                (ride) => consumptionValue[0] < ride.rideInfos[0].performance.fuelConsumption &&\n                    ride.rideInfos[0].performance.fuelConsumption < consumptionValue[1]\n            );\n            return filteredRides;\n        }\n    }\n\n    // fuel filter\n    const [selectedFuel, setSelectedFuel] = React.useState('');\n\n    //button handler\n    const handleChangeFuel = (event) => {\n        const inputFuel = event.target.value;\n\n        if (inputFuel === selectedFuel) {\n            setSelectedFuel(\"\");\n        }\n        else {\n            setSelectedFuel(inputFuel);\n        }\n    }\n\n    //filtering method\n    const filterByFuel = (filteredData) => {\n\n        if(!selectedFuel) return filteredData;\n\n        const filteredRides = filteredData.filter(\n            (ride) => ride.rideInfos[0].performance.fuel === selectedFuel\n        );\n\n        return filteredRides;\n    }\n\n\n\n    // KW filter\n    const [kWValue, setkWValue] = useState([20, 500]);\n\n    // kw function\n    function kwValue(value) {\n        return `${value}kW`;\n    }\n    //kw handler button\n    const handleChangeSliderKW = (event, newValue, activeThumb2) => {\n        if(!Array.isArray(newValue)){\n            return;\n        }\n\n        if(activeThumb2 === 0){\n            setkWValue([Math.min(newValue[0], kWValue[1] - minDistance), kWValue[1]])\n        } else {\n            setkWValue([kWValue[0], Math.max(newValue[1], kWValue[0] + minDistance)]);\n        }\n    }\n\n    //filter method\n    const filterByKW = (filteredData) => {\n\n\n        if( kWValue[0] === 20 && kWValue[1] === 500) {\n            return filteredData;\n        }\n        else if (kWValue[0] === 20){\n            const filteredRides = filteredData.filter(\n                (ride) => ride.rideInfos[0].engine.power <= kWValue[1]\n            );\n            return filteredRides;\n        }\n        else if (kWValue[1] === 500){\n            const filteredRides = filteredData.filter(\n                (ride) => kWValue[0] <= ride.rideInfos[0].engine.power\n            );\n            return filteredRides;\n        }\n        else {\n            const filteredRides = filteredData.filter(\n                (ride) => kWValue[0] <= ride.rideInfos[0].engine.power &&\n                    ride.rideInfos[0].engine.power <= kWValue[1]\n            );\n            return filteredRides;\n        }\n\n    }\n\n\n    const handleResetFilter = () => {\n        setSelectedCity(\"\");\n        setdateFrom(\"\")\n        setYearUntil(\"\")\n        setConsumptionValue([0,15])\n        setSelectedFuel(\"\")\n        setkWValue([20,500])\n    }\n\n\n    useEffect(() => {\n            let filteredData = filteredBySearchWord(rides);\n            filteredData = filterByBrand(filteredData);\n            filteredData = filterByDate(filteredData);\n            filteredData = filterByConsumption(filteredData);\n            filteredData = filterByFuel(filteredData);\n            filteredData = filterByKW(filteredData);\n            //filteredData = filterByBrand(selectedBrand, filteredData)  filteredBySearchWord(rides)\n            setFilteredList(filteredData);\n\n        },\n        [searchWord, selectedCity, dateFrom, yearUntil, consumptionValue, selectedFuel, kWValue])\n\n\n\n    return (\n        <Stack direction={\"row\"} spacing={2}>\n\n            <Box\n                flex={1}\n                p={2}\n                sx={{ display: { xs: \"none\", sm: \"block\"} }}\n                backgroundColor={\"lightgray\"}\n                maxWidth={230}\n                maxHeight={800}\n\n            >\n                <Box>\n                    <Stack direction={\"row\"}>\n                        <FilterAltIcon color={\"error\"} size={\"large\"}/>\n                        <Typography color={\"error\"} variant={\"h5\"}>Filtruj podle</Typography>\n                    </Stack>\n                </Box>\n                <List>\n                    <ListItem>\n                        <Typography>\n                            Značka auta\n                        </Typography>\n                    </ListItem>\n                    <ListItem>\n                        <FormControl sx={{ m: 1, minWidth: 180 }}>\n                            <InputLabel id=\"demo-select-small\">Vyber z možností</InputLabel>\n                            <Select\n                                labelId=\"demo-select-small\"\n                                id=\"demo-select-small\"\n                                value={selectedCity}\n                                label=\"Vyber z možností\"\n                                onChange={handleChangeCity}\n                            >\n                                <MenuItem value=\"Škoda\">Škoda</MenuItem>\n                                <MenuItem value=\"Mercedes\">Mercedes</MenuItem>\n                                <MenuItem value=\"Audi\">Audi</MenuItem>\n                                <MenuItem value=\"VW\">VW</MenuItem>\n                                <MenuItem value=\"BMW\">BMW</MenuItem>\n                            </Select>\n                        </FormControl>\n                    </ListItem>\n                    <ListItem>\n\n                    </ListItem>\n                    <ListItem>\n                        <Typography>\n                            Rok výroby\n                        </Typography>\n                    </ListItem>\n                    <ListItem>\n                        <Stack direction={\"row\"}>\n                            <FormControl sx={{ m: 1, minWidth: 75 }} size=\"small\">\n                                <InputLabel id=\"dateFrom\">Od</InputLabel>\n                                <Select\n                                    labelId=\"dateFrom\"\n                                    id=\"dateFrom\"\n                                    value={dateFrom}\n                                    label=\"Od\"\n                                    onChange={handleChangedateFrom}\n                                >\n                                    <MenuItem value=\"\">\n                                        <em>None</em>\n                                    </MenuItem>\n                                    <MenuItem value={2000}>2000</MenuItem>\n                                    <MenuItem value={2005}>2005</MenuItem>\n                                    <MenuItem value={2010}>2010</MenuItem>\n                                </Select>\n                            </FormControl>\n\n                            <FormControl sx={{ m: 1, minWidth: 75 }} size=\"small\">\n                                <InputLabel id=\"yearTo\">Do</InputLabel>\n                                <Select\n                                    labelId=\"yearTo\"\n                                    id=\"yearTo\"\n                                    value={yearUntil}\n                                    label=\"Do\"\n                                    onChange={handleChangeYearUntil}\n                                >\n                                    <MenuItem value=\"\">\n                                        <em>None</em>\n                                    </MenuItem>\n                                    <MenuItem value={2000}>2000</MenuItem>\n                                    <MenuItem value={2005}>2005</MenuItem>\n                                    <MenuItem value={2010}>2010</MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Stack>\n                    </ListItem>\n\n                    <ListItem>\n\n                    </ListItem>\n\n                    <ListItem>\n                        <Typography>\n                            Spotřeba l/100km\n                        </Typography>\n                    </ListItem>\n\n                    <ListItem></ListItem>\n                    <ListItem></ListItem>\n\n                    <ListItem>\n                        <Box sx={{ width: 175 }}>\n                            <Slider\n                                getAriaLabel={() => 'Fuel Consumption range'}\n                                value={consumptionValue}\n                                onChange={handleChangeSliderConsumption}\n                                valueLabelDisplay=\"on\"\n                                getAriaValueText={fuelConsumptionValue}\n\n                                min={0}\n                                max={15}\n                                step={0.1}\n                            />\n                        </Box>\n                    </ListItem>\n\n                    <ListItem></ListItem>\n\n                    <ListItem>\n                        <Typography>\n                            Palivo\n                        </Typography>\n                    </ListItem>\n\n                    <ListItem>\n                        <FormControl sx={{ m: 1, minWidth: 180 }}>\n                            <InputLabel id=\"demo-select-small\">Vyber z možností</InputLabel>\n                            <Select\n                                labelId=\"demo-select-small\"\n                                id=\"demo-select-small\"\n                                value={selectedFuel}\n                                label=\"Vyber z možností\"\n                                onChange={handleChangeFuel}\n                            >\n                                <MenuItem value=\"Diesel\">Diesel</MenuItem>\n                                <MenuItem value=\"Benzín\">Benzín</MenuItem>\n                                <MenuItem value=\"LPG\">LPG</MenuItem>\n                                <MenuItem value=\"Elektro\">Elektro</MenuItem>\n                                <MenuItem value=\"Hybrid\">Hybrid</MenuItem>\n                            </Select>\n                        </FormControl>\n                    </ListItem>\n\n                    <ListItem></ListItem>\n\n                    <ListItem>\n                        <Typography>\n                            Výkon v kW\n                        </Typography>\n                    </ListItem>\n\n                    <ListItem></ListItem>\n                    <ListItem></ListItem>\n\n                    <ListItem\n                        sx={{\n                            maxWidth: 200\n                        }}>\n                        <Slider\n                            getAriaLabel={() => 'Minimum distance shift'}\n                            value={kWValue}\n                            onChange={handleChangeSliderKW}\n                            valueLabelDisplay=\"on\"\n                            getAriaValueText={kwValue}\n                            min={20}\n                            max={500}\n                            step={10}\n\n                        />\n\n                    </ListItem>\n\n                    <ListItem></ListItem>\n\n                    <ListItem>\n                        <Box\n                            sx={{\n                                marginLeft: 1,\n                                display: 'flex',\n                                flexDirection: 'column',\n                                alignItems: 'center',\n                            }}\n                        >\n                            <Button variant={\"contained\"} onClick={handleResetFilter}>Resetovat filtry</Button>\n\n                        </Box>\n                    </ListItem>\n                </List>\n            </Box>\n\n\n            <Box\n                flex={4}\n                p={2}\n                maxWidth={1000}\n            >\n                <Box\n                    width={'95%'}\n                    backgroundColor={\"lightgray\"}\n                    padding={3}\n                >\n                    <SearchS>\n                        <SearchIconWrapper>\n                            <SearchIcon />\n                        </SearchIconWrapper>\n                        <StyledInputBase\n                            sx={{color: \"black\"}}\n                            placeholder=\"Search…\"\n                            inputProps={{ 'aria-label': 'search' }}\n                            onChange={handleFilter}\n                        />\n                    </SearchS>\n                </Box>\n\n\n\n                <div>\n                    {filteredList.map( (ride) => (\n                        <RideCard key={ride.id} props={ride}/>\n                    ) )}\n                </div>\n            </Box>\n\n\n\n\n\n\n\n\n        </Stack>\n\n    );\n}\n\n\n\nexport default Feed;","/Users/janhrbac/IdeaProjects/CarShare/frontend_car_share/src/components/layout/RideCard.js",["69","70"],[],"import  {useState} from 'react';\nimport {\n    Box, Button,\n    CardActions,\n    CardContent, CardHeader,\n    Collapse,\n    IconButton,\n    List, ListItem,\n    Stack,\n    styled,\n    Typography\n} from \"@mui/material\";\nimport React from \"react\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\nimport Modal from '@mui/material/Modal';\nimport axios from \"axios\";\n\n\nconst ExpandMore1 = styled((props) => {\n    const { expand, ...other } = props;\n    return <IconButton {...other} />;\n})(({ theme, expand }) => ({\n    transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n        duration: theme.transitions.duration.shortest,\n    }),\n}));\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'background.paper',\n    border: '2px solid #000',\n    boxShadow: 24,\n    p: 4,\n};\n\nconst CarCard = (props) => {\n\n    const [expanded, setExpanded] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n    const [disabled, setDisabled] = useState(false)\n    const handleExpandClick = () => {\n        setExpanded(!expanded);\n    };\n\n    const { id, brand, model, bodywork, seats, doors, imagePath, year, description,  carInfos } = props.props\n    const { performance, engine, powerTransimission } = carInfos[0]\n    const { maxSpeed, zeroToHundred , fuel, fuelConsumption } = performance\n    const { countCylinders, displacement , power, torque } = engine\n    const { gears, driveType } = powerTransimission\n\n\n    function handleFavorite(car){\n\n        if(!sessionStorage.getItem(\"logged\")) {\n            // dialogove okno\n            setShowModal(true);\n\n        } else {\n            // save\n            console.log(\"save\")\n            setDisabled(true);\n\n            saveCarToFav(car)\n            console.log(sessionStorage.getItem(\"userData\"))\n        }\n    }\n\n    const saveCarToFav = async (car) => {\n\n        const parse = JSON.parse(sessionStorage.getItem(\"logged\"))\n        const email = parse.email\n        const password = parse.password\n\n        const newUserCar = ({\n            email: email,\n            password: password,\n            carId: car.id\n        })\n\n        const response = await axios.post(\n            '/user/savecar',\n            JSON.stringify(newUserCar),\n            { headers: {\n                    'Content-Type': 'application/json'\n                }}\n        )\n    }\n\n    const title = brand + \" \" + model + \", \" + year\n\n    return(\n        <div className={\"card\"}>\n            <CardHeader\n                title={title}\n\n\n            />\n            <Stack direction={\"row\"}>\n                <Box\n                    flex={1}\n                    sx={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center',\n                    }}\n\n                >\n                    <img src={\"/images/\" + imagePath} width=\"200\" height=\"130\" alt={\"img\"}/>\n                </Box>\n                <Box\n                    flex={2}\n                >\n                    <CardContent>\n                        <Typography gutterBottom variant='h6' component='div'>\n                            O autu\n                        </Typography>\n\n                        <Typography variant='body2'>\n                            {description}\n                        </Typography>\n                    </CardContent>\n\n                </Box>\n            </Stack>\n\n            <CardActions>\n                <Stack\n                    direction={\"row\"}\n                    justifyContent={\"space-between\"}\n                    width={'100%'}\n                >\n                    <Button\n                        variant=\"outlined\"\n                        onClick={() => handleFavorite(props.props)}\n                        disabled = {disabled}\n\n                    >\n                        Přidat do oblíbených\n                        <FavoriteIcon />\n                    </Button>\n                    <Box\n                        sx={{ justifyContent: 'flex-end'}}\n                    >\n                        <ExpandMore1\n                            expand={expanded}\n                            onClick={handleExpandClick}\n                            aria-expanded={expanded}\n                            aria-label=\"show more\"\n                        >\n                            <ExpandMoreIcon/>\n\n                        </ExpandMore1>\n                    </Box>\n                </Stack>\n\n                <Modal\n                    open={showModal}\n                    onClose={() => setShowModal(false)}\n                    aria-labelledby=\"modal-modal-title\"\n                    aria-describedby=\"modal-modal-description\"\n                >\n                    <Box sx={style}>\n                        <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n                            Oblíbené\n                        </Typography>\n                        <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\n                            Pro ukládání inzerátů do oblíbených je nutné se přihlásit.\n                        </Typography>\n                    </Box>\n                </Modal>\n\n            </CardActions>\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                <CardContent>\n                    <Stack direction=\"row\">\n                        <Box marginLeft={10}>\n                            <Box>\n                                <Typography variant={\"h6\"}>\n                                    Základní informace:\n                                </Typography>\n                                <List>\n                                    <ListItem>\n                                        <Typography>Karosérie: {bodywork}  </Typography>\n                                    </ListItem>\n\n                                    <ListItem>\n                                        <Typography>Počet sedadel: {seats}  </Typography>\n                                    </ListItem>\n\n                                    <ListItem>\n                                        <Typography>Počet dveří: {doors}  </Typography>\n                                    </ListItem>\n                                </List>\n\n                            </Box>\n\n                            <Box>\n                                <Typography variant={\"h6\"}>\n                                    Výkon:\n                                </Typography>\n                                <List>\n                                    <ListItem>\n                                        <Typography>Maximální rychlost: {maxSpeed} km/h </Typography>\n                                    </ListItem>\n\n                                    <ListItem>\n                                        <Typography>Zrychlení z 0km na 100km: {zeroToHundred} s </Typography>\n                                    </ListItem>\n\n                                    <ListItem>\n                                        <Typography>Spotřeba: {fuelConsumption} </Typography>\n                                    </ListItem>\n\n                                    <ListItem>\n                                        <Typography>Palivo: {fuel} </Typography>\n                                    </ListItem>\n                                </List>\n\n                            </Box>\n\n                        </Box>\n\n                        <Box marginLeft={15}>\n                            <Box marginBottom={5}>\n                                <Typography variant={\"h6\"}>\n                                    Přenos výkonu:\n                                </Typography>\n                                <List>\n                                    <ListItem>\n                                        <Typography>Počet rychlostí: {gears} </Typography>\n                                    </ListItem>\n\n                                    <ListItem>\n                                        <Typography>Pohon: {driveType} </Typography>\n                                    </ListItem>\n                                </List>\n\n                            </Box>\n\n                            <Box>\n                                <Typography variant={\"h6\"}>\n                                    Motor:\n                                </Typography>\n                                <List>\n                                    <ListItem>\n                                        <Typography>Počet válců: {countCylinders} </Typography>\n                                    </ListItem>\n\n                                    <ListItem>\n                                        <Typography>Obsah: {displacement} l </Typography>\n                                    </ListItem>\n\n                                    <ListItem>\n                                        <Typography>Výkon: {power} kW </Typography>\n                                    </ListItem>\n\n                                    <ListItem>\n                                        <Typography>Kroutící moment: {torque} Nm </Typography>\n                                    </ListItem>\n                                </List>\n\n                            </Box>\n                        </Box>\n                    </Stack>\n                </CardContent>\n            </Collapse>\n\n        </div>\n\n    )\n}\n\n\n\n\nexport default CarCard;\n\n/*\n            title= {item.brand} {item.model}\n            <img src={item.image} className={\"cardImage\"} alt={\"\"}/>\n\n              const { performance, engine, powerTransimisson } = carInfos\n    const { maxSpeed, zeroToHundred, fuel} = performance\n */",{"ruleId":"71","severity":1,"message":"72","line":31,"column":8,"nodeType":"73","endLine":31,"endColumn":10,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":15,"column":8,"nodeType":"77","messageId":"78","endLine":15,"endColumn":17},{"ruleId":"71","severity":1,"message":"79","line":313,"column":9,"nodeType":"73","endLine":313,"endColumn":97,"suggestions":"80"},{"ruleId":"75","severity":1,"message":"81","line":52,"column":13,"nodeType":"77","messageId":"78","endLine":52,"endColumn":15},{"ruleId":"75","severity":1,"message":"82","line":87,"column":15,"nodeType":"77","messageId":"78","endLine":87,"endColumn":23},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'rides'. Either include it or remove the dependency array.","ArrayExpression",["83"],"no-unused-vars","'riderided' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'filterByBrand', 'filterByConsumption', 'filterByDate', 'filterByFuel', 'filterByKW', 'filteredBySearchWord', and 'rides'. Either include them or remove the dependency array.",["84"],"'id' is assigned a value but never used.","'response' is assigned a value but never used.",{"desc":"85","fix":"86"},{"desc":"87","fix":"88"},"Update the dependencies array to be: [rides]",{"range":"89","text":"90"},"Update the dependencies array to be: [searchWord, selectedCity, dateFrom, yearUntil, consumptionValue, selectedFuel, kWValue, filteredBySearchWord, rides, filterByBrand, filterByDate, filterByConsumption, filterByFuel, filterByKW]",{"range":"91","text":"92"},[740,742],"[rides]",[8608,8696],"[searchWord, selectedCity, dateFrom, yearUntil, consumptionValue, selectedFuel, kWValue, filteredBySearchWord, rides, filterByBrand, filterByDate, filterByConsumption, filterByFuel, filterByKW]"]